{
  "text": "자, 어떻게 하는지 수업 방식에 대해서 알려드리겠습니다. 수업 방식은 우리가 피드백을 하는 게 본 수업에서는 제일 중요합니다. 여러분들이 이제 오늘 배운 내용 중에 모르는 게 있으면 이번 주 일요일까지 저한테 알려주시면 잘 알게 될 것 같습니다. 시작할 때 지금과 같이 처음에 질문 온 것들을 여러분들한테 먼저 알려드리고 그거를 하니까 여러분들이 항상 여기에 보내주시길 바라요. 지난 수업에 들었던 어디에 몇 장에 뭐가 모르겠어요 이렇게 정확하게 알려줘야지 여러분이 잘 알게 될 것 같습니다. 제가 피드백을 잘해줘요. 어딘가 모르는 게 있는지 모르는 것 같아요. 뭐인 것 같아요 하면 어디서 말하는 거야 이럴 수도 있어요. 그러니까 여러분들이 정확하게 이 내용에 대해서 어떤 거 그런 거 생각만 하면 제가 알려드릴 수 있습니다. 자, 이게 제일 중요하다고 생각해요. 여러분들이 온다고 운영체제를 모르고 지나가지 마시고 여러분들이 운영체제를 다 이해하고 지나가실 수 있어요. 그래서 더 착한 분들한테 좋으니까 조심하세요. 그래서 손 yere 질문하라고 안 했고 엘리베이터로만 전화했다고 하는 것 보� suits the situation a little bit more. 그런데 그리고 누린다고 해서 부끄러운 게 아니고 모르는지 아는 척 하는 게 부끄러우실 수 있죠. 그런데 여러분들이 이 논부를 알면 되겠죠. 눈물 자국이 � disad groove이 된다고 말했고 하는 그러니까 우리는 밥을 먹을 때 몸에 뱉기 때문에 당면을 그릴에 부착 얻고 있어요. 그 이거를 알면 되니까 그냥 질문을 주세요. 그러면 제가 설명을 못해서 여러분들이 이해를 못했을 수도 있으니까 그거에 대해서 자세히 설명을 드릴게요. 자 평가방법은 출석 10% 프로젝트 30 중간상자 30 평가 30입니다. 그래서 출석 10%는 여러분이 결석을 내본 하면 그거는 불신입니다. 그거 어떻게 해줄 수가 없어요. 그런데 결석 3번에 지각 결석 한 번 할 때마다 3점씩 단점인데 그 지각 한 번에 결석 3번 하면 10점 단점이 돼요. 그럼 0점이죠. 0점이면 F가 나가냐 F가 안 나가냐 그냥 출석장소가 0점입니다. 결석만 내본 안 하면 충분히 상점은 나가니까 여러분 걱정 안 하셔도 될 것 같고 지각에 대해서는 지금 바로 부르지 않습니다. 제가 피드백하고 난 뒤에 한 시간 정도 수업 마치고 피드백이 30분 정도 걸렸다 이러면 그때 부르거나 한 시간 지나서 부르나 그럴 뿐이야. 그렇기 때문에 40분 이상 여러분이 늦었다면 지각 그만한지 몇 십분 걸린 거 맞죠? 그래서 지각에 대해서도 크게 걱정 안 하셔도 되고 학교에 행사가 있어서 거기 갔다 오면 된다 이런 거 미리 저한테 알려 주면 지각에 대해서는 안 하죠. 그리고 프로젝트는 30%가 있는데 그게 개별 프로젝트입니다. 개별 프로젝트인데 여러분들이 잘 아셔야 돼요. 중간 보좌 30%, 중간 보좌 30%고요. 프로젝트가 30%입니다. 출석이 10%니까 3개의 대중이 똑같습니다. 그런데 프로젝트가 그건 하나죠. 그러면 15, 15 이렇게 둘이 가다가 코딩하는 것도 여러분들이 충분히 할 수 있다고 생각합니다. 여러분의 성적을 받는 걸 제가 잘 보면 결석을 몇 번 했느냐 거기에서 많이 배이고요. 중간 보좌, 기말 보좌는 제가 큰 도움이어서 시험을 예시했는데요. 그렇게 큰 점수 차이가 많이 안 납니다. 그러다 보니까 나한테 하지 말아야 되니까 그럼 여기에서 차이가 많이 나냐 개별 프로젝트의 차이가 많이 납니다. 그래서 여러분들이 개별 프로젝트를 잘 할 수 있을까 제가 생각하는 것에 대해서 잘 아시고 보고도 잘 하시는 분들이 계신데요. 보고도 좀 할 수도 있으나 상대 평가를 해야 되기 때문에 여러분들이 그걸 고민해서 하시면 되겠습니다. 이제 교수실은 저기 가면 7층에 바로 있어서 금방 갔다 오죠. 네, 이제는 그처럼 바로 앞에 있습니다. 7층에 오시면 되고 여러분 530분은, 208년은 여러분 208년은 안 치료 전부 다 이제 4학년이니까 5층에 엘베 내리자마자 바로 있는 거기가 바로 530분입니다. 거기 가면 조교가 있게 해서 프로젝트에 대해서 여러분의 재학 사용이나 이런 게 있을 때 가서 물어보시면 해결해 줍니다. 자, 여기까지 궁금한 게 있으신가요? 요즘은 저희가 전에와 다르게 챗TPT가 실제로 많이 해주는 시대가 왔죠. 코딩을 하실 때 여러분의 이론에 대해서 저희가 코딩을 나가게 되는데 베이스로 저희 쪽에서 라이프로리오를 제공할 수 있습니다. 그러면 그 기반으로 여러분이 하셔야 됩니다. 여러분은 어떻게 하면 챗TPT를 사용해서 교수님을 속일까? 편하게 숙제를 할까? 하고 교수들은 챗TPT를 어떻게 속여가지고 애들이 숙제를 직접하게 만들까? 여러분과 싸움이니까요. 하여튼 숙제는 여러분들이 꼭 하시고 챗TPT를 이용하셔도 됩니다. 이용하지 말라고는 안 합니다. 이용은 하시는데 여러분의 교육의 조구가 돼야 되지 여러분의 정보가 돼서는 안 됩니다. 여러분의 교육의 정보가 되면 여러분의 존재를... 타카이들도 챗TPT를 쓰면서 챗TPT가 자기한테 정보가 되죠. 그런데 여러분들이 챗TPT가 정보가 돼서는 안 됩니다. 여러분의 공부를 하는데 참고로 도움을 주는 역할로 해야지 그게 정보가 돼서는 안 됩니다. 여러분이 꼭 코딩을 해서 여러분의 솔루션을 보내놓길 바랍니다. 아시겠죠? 무만스럽죠? 이제 열심히 해서 성적 잘 받길 바랍니다. 자 오늘은 1장에 대해서 할 건데 제가 2장은 하지 않아요. 2장은 하지 않아요. 바로 3장으로 넘어갈 겁니다. 1장이라고 들었지만 우리가 1, 2장이 꽤 있다고 보시면 됩니다. 그래서 여러분들이 보시면 되고요. 지금 글 본 게 리스가 공룡 책이죠. 공룡 책. 그래서 내용이 공룡이냐 하면 진정이 좀 더 많을 수도 있어요. 그 외에 그러면 공룡TPT를 썼나? 그거 했을 때는 저 디자인이 좀 더 예뻐보였을 수도 있었어요. 중요한 그런 건 없습니다. 그래서 여러분들이 개념에 대해서 잘 알면 되지 공룡 책을 다 보셔도 돼요. 여러분이 나눠드린 TPT를 가지고 여러분들이 잘 공룡과 합친다면 충분히 성적을 받을 수 있습니다. 그러면 오늘 텐트가 O.S. O.S.가 아닙니다. 오늘 이제 O.S. 소개를 드리고 오늘 1장만 하고 수업 시작 전부터 오늘의 제일 중요한 부분은 인터럭트입니다. 인터럭트를 꼭 기억하세요. 우리가 오늘 배우는 것은 그러면 O.S.가 O.S.가 무엇을 하는 자세인지 알아보고 그리고 컴퓨터가 어떤 구성이 있는지 또 어떤 녀석들이 있는지 그리고 컴퓨터는 어떤 기준으로 되어 있는지를 알아보고 오플레이팅 시스템은 어떤 동작들을 하는지도 알아보고 역할을 하는지 알아보고 O.S.에서 리소스 매니지먼트를 어떻게 하는지 조금 알고 생각할 겁니다. 그리고 시큐리티와 프로텍션에 대해서 우리가 좀 간단히 알아보고요. 밑에 3개는 우리가 간단하게 알아보고 체크할 겁니다. 시큐리티 1장 1장 1장으로 끝날 겁니다. 맨 마지막에 그는 주륵 하면서 지나가고 앞에 거에 대해서 좀 더 간단하게 알아보고 지나갈 겁니다. 오늘 알아보는 거는 나중에 여러분이 무엇을 배울 거라는 거를 소개해드리는 자리지 그렇기를 바랍니다. 심한적으로 우리가 알아보는 시간은 아닙니다. 여러분들이 앞으로 이걸 할 거다라는\n\n소개가 된다고 생각하시면 되겠습니다. 그러면 여러분들이 다 아는 것 부터 시작을 해볼건데요. 이번 챕터1의 목적은 뭐냐면 그리고 컴퓨터 시스템의 구성에 대해서 우리가 좀 알아보고요. 트럭트 역할에 대해서 알아볼거구요. 이 트럭트가 얼마나 OS에서 중요한 역할을 하는지 알아볼거구요. 멀티프로세서 시스템에 대해서 우리가 어떤 요소들이 있는지 알아보고 그리고 터널 모드에 대해서 간단히 알아볼거구요. 그리고 OS가 어디에서 사용되고 있는지 우리가 어떻게 사용되고 있는지 잠시 알아보고 하시도록 하겠습니다. 시스템, 컴퓨터 시스템 구성입니다. 컴퓨터 시스템 구성에는 우리가 여러분들은 잘 아시겠지만 몇가지로 구성되고 있어요. 크게 4가지로 분류가 됩니다. 맨 밑에 하드웨어가 있구요. 그 위에 오퍼레이팅 시스템이 있구요. 그 위에 어플리케이션이 있고 그 위에 유저가 있습니다. 하드웨어는 여러분들이 잘 아시는 CPU, 메모리, IOT가 있을 수 있구요. 오퍼레이팅 시스템은 뭐하는 녀석이냐면 유저들에게 어플리케이션이 잘 돌아갈 수 있도록 레몬하고 조명하고 이런 역할을 합니다. 그리고 어플리케이션은 여러분들이 다 아시겠지만 여러분의 유저들의 문제를 해결하기 위해서 동작되고 있습니다. 여러분의 즐거움을 해결하는 이유에서 뭐가 있지? 게임이 있죠. 그리고 여러분의 문서산업을 해결해주는 월드 프로세스가 있구요. 그리고 컴파일링, 웹 프로그램 이런것들이 있습니다. 그런걸 우리가 어플리케이션이라고 하구요. 유저들, 사람인 여러분들은 사람만 하는게 아니라 이 컴퓨터가 다른 컴퓨터를 대화할 수 있죠. 기계가 다른 컴퓨터를 또 대화할 수 있습니다. 그래서 유저들은 사람뿐만 아니라 머신과 다른 컴퓨터들도 포함되고 있다는 넓게 볼 수 있습니다. 그래서 우리는 이번 학기 동안 뭘 배우게 되냐 오퍼레이팅 시스템에 대해서 배우게 됩니다. 자 그러면 오퍼레이팅 시스템은 뭐하는 녀석인지를 알아봐야 되겠죠. 그 오퍼레이팅 시스템은 보는 관점은 두가지로 볼 수 있어요. 사용자 관점과 시스템 관점으로 크게 두가지로 나눌 수가 있는데요. 사용자 관점에서 보는 능력자 시대에는 편의성을 제공해 주면 좋습니다. 그리고 사용법이 쉬워야 돼요. 그리고 성능이 좋아야 됩니다. 사용자 입장에서는 딱 그 세개입니다. 그리고 OS에서 제공해 줬으면 좋겠어요. 그게 OS의 역할입니다. 그렇다보니 이 소스가 어떻게 사용되는지 전혀 생각하지 않습니다. 운전실 때문에 배터리가 빨리 없어진다고 생각하시나요? 맞죠? 그냥 소스를 어떻게 쓰든 말든 CPU를 어떻게 활용하든 말든 그거는 오직 성능만이 좋으면 됩니다. 맞죠? 그리고 여러분들에 대해서 이 OS가 인터페이스가 편리해졌으면 좋겠어요. 그래서 인터페이스가 편리해져서 여러분이 지금 휴대폰을 쓸 때 터치스크린을 쓰고 있고 여러분이 펜으로 흡입하고 있습니다. 이런 것들의 편리성을 여러분들에게 제공하고 있죠. 그리고 또 편리성을 제공하는 데 있어서 자동차 같은 경우에는 여러분이 스크린을 감기 장식으로 쓰면 버튼 한 번만 눌려서 그 자동차에 들어간 OS가 그것을 작동해서 차량과 차량이 부딪히지 않게 서비스도 해주고 있습니다. 자 그렇게까지 우리가 OS에서 편리성을 제공하고 있고요. 그러면 시스템 단점에서 OS는 뭐냐면 이러한 프로그램, 유저 프로그램들이 얼마나 잘 작동하게 해줄지를 고민하는 겁니다. 그래서 이 녀석들이 잘 작동하게 해주려면 비소스 분배를 잘 해야됩니다. 어떤 녀석이 종류에서 계속 쓰고 있게끔 하냐고 잘 스케줄링을 해야 되는데 그런 것들을 하게 되죠. 그리고 어떤 프로그램을 지금 동작시킬 건지 멈출 것인지 이런 제어가 잘 되어야 합니다. 그런 것들을 시스템 단점에서는 하게 되는데 우리가 OS를 개발을 할 때는 사용자 편리성도 고민을 하게 되고요. 우리가 특히 시스템에서 어떻게 성능을 살려서 사용자 편리성과 성능을 낼 것인지 고민을 하게 되는데 여러분이 OS를 배울 때는 시스템 단점을 많이 우리가 생각하게 됩니다. 자 그러면 OS는 어떤 역할을 하냐고 했을 때 OS는 다양한 역할을 하고 있죠. 왜 그렇냐면 OS는 다양하게 설계되고 다양한 곳에 들어가죠. 아까 설명할 때만 해도 우리가 자동차에 들어간다고 여러분이 컴퓨터에 쓰고 있고 여러분이 태블릿에 쓰고 있고 다양한 토스트기에 들어가고 여러분은 프로젝터, 프로젝터 저기 있는 TV, TV에도 들어갑니다. 여러분이 출석 인정을 하는 여기에 또 들어갔지만 저는 쓰지 않습니다. 이런 데도 다 들어갑니다. 그래서 다양한 곳에 쓰이고 있고요. 이게 OS가 언제 사용되게 됐냐면 맨투맨은 배치 프로그래밍을 해서 프린터 펀치를 꽂아서 들고 갔죠. 자동으로 꽂아서 스윙시키고 그랬어요. 그러다 보니 빨리빨리 처리를 하기 위해서 다양한 계산을 빨리 하고 싶죠. 그러다 보니 이걸 자동으로 하는 것만 이렇게 하게 됩니다. 그래가지고 다양한 것을 타보니까 발전하게 되면서 나온 게 OS예요. 항상 우리 IT의 발전은 국내서부터 시작합니다. 암호 풀려고 하다가 컴퓨터가 더 발전하고 그랬죠. 그리고 여러분이 소실적인 이야기를 해보면 여러분이 지금 펜으로 이렇게 글을 적고 있잖아요. 이게 소실적으로 제가 군대에 있을 때 썼었습니다. 썼는데 그때는 전부 다 일반인들도 휴대폰이 보글보글 앉아있었는데요. 그래가지고 그때 이렇게 펜으로 적어서 보내고 그랬어요. 그게 왜냐면 그때만 해도 통신으로 이렇게 무전을 했었어요. 그런데 이거는 어떻게 돼요? 보안성이 떨어져요. 보안성이 떨어져서 보전기에 이 패드를 연결해서 팍! 쪼그려. 그걸 딱 밀면 반대편에 딱 받아요. 그래서 이게 말로 하는 것보다 보안적으로 하게 됐고 이게 이제 보편적으로 가격이 다운되면서 그때 두께가 이만했거든요. 여러분 이런 거 들고 못 다니겠죠. 가격이 다운되고 기술이 발전하면서 여러분들한테 이렇게 제공됩니다. 그래서 여러분들이 이제 많은 서비스를 해결되고 있는데 뭔가 이를 따라서 보면 문제입니다. 이쪽에서 제일 빨리 보편을 해서 보급화되고 있다는 게 사실입니다. 지금도 전략적으로 문제가 많아요. 그래서 보면 OS는 그러면 정리하자면 무엇인가요? 이랬을 때는 그렇다는 정리가 없거든요. 그냥 여러분이 윈도우 샀을 때 윈도우라고 하면 그게 OS라고 생각하죠. 맞죠? 그 OS라고 생각하면 근데 OS에는 뭐 다양한 것들이 깔려있어요. 깔려있어요. 맞죠? 그 깔려있는데 세 가지 구성물이 서로 깔려있습니다. 그 OS 중에 하나는 컴퓨터를 켜자마자 계속 진행되고 있습니다. 우리가 언제 윈도우를 끌 때까지 그게 하나가 실행되고 있는데 우리가 그게 컴퓨터에서 제일 중요한 프로그램입니다. 그 제일 중요한 프로그램을 컴퓨터 프로그램을 우리가 뭐라고 부르냐면 커널이라고 합니다. 그 커널에 대해서 우리가 이번 학기에 계속 배우게 됩니다. 만약에 커널이 컴퓨터에 없다고 하면 그냥 깡통, 깡통이죠. 아무것도 쓸 수 없어요. 그냥 전기만 들어오는 전자상체로\n\n아무 역할도 못합니다. 그래서 우리가 억지어적으로 그 녀석한테 어떤걸 행위 움직일 수 있다는걸 넣어줘야 동작할 수 있죠. 그래서 우리가 운영체제를 넣어야지만 동작은 썰 수 있어요. 그래서 이 소울이 실수입니다. 꼭 그래야 되겠죠? 그리고 우리가 이 한계가 돌아가는거 말고 그 안에는 또 시스템 프로그램들이 프린터를 제한해줘서 시스템 어플리케이션 프로그램이 되겠죠. 그런것들이 우리가 필요할 때 돌아가는 데 손길이 있고 그리고 어플리케이션이라 하면 OS 깔았는데 거기에 할 수 있는 스팀 이런것들을 도와줘요. 이렇게 운영체제를 정리하고 있습니다. 제가 운영체제를 강요하는 것은 아닙니다. 운영체제를 들으면서 이번에 프로세스를 배우게 되는데 그렇게 하다보면 아까 자원관리를 한다고 하죠. 계속 손으로 뭘 하는건가요 이 소스 관리를 한다고 하죠. 그리고 프로그램을 실행을 시키고 실행을 안시키고 이 관리를 한다고 하죠. 여러분의 일상생활도 여러분의 잠이 오게 됩니다. 업무들이 왔는데 이 업무들을 내가 어떻게 스케줄링을 하면 최대의 퍼포먼스를 낼 수 있을까를 운영체제를 보면서 배우면서 더 잘할 수 있습니다. 대학원생들과 대학원생들과 이야기할 때 운영체제도 배우고 싶은데 어느 스케줄링이 맞나 이런 이야기를 합니다. 여러분의 일상생활에도 여러분의 이 각 스케줄링 부분을 배울 수 있습니다. 어떤 퍼포먼스를 낼 수 있었다면 여러분의 일상생활에도 녹여보시면 재미있을 겁니다. 그거를 이번 학기에 배울거야. 컴퓨터 시스템의 구성에 대해서 알아보도록 하겠습니다. 컴퓨터 시스템에는 크게 4개가 들어갑니다. 프로세서 맴베브 아이오 모드 시스템 버스 이렇게 총 크게 4가지 구성이 있고요. 여러분들이 프로세서라고 하면 이미 알고 있습니다. Central Processing Unit CPU 라고 부르죠. 여러분들이 쓰고 있고 PC 이 애가 하는 녀석은 실질적으로 우리의 은혜같은 역할을 하는 거죠. CPU가 무엇을 연산하고 처리를 하는 것은 CPU가 합니다. 이런 CPU가 하고요. 또 우리가 그 CPU가 작업을 하기 위해서 데이터나 명령어수를 가지고 있어야 되는 공간이 필요한데 그게 누구냐 하면 메인 메모리입니다. 메인 메모리는 우리가 다른 말로 뭐라고 하냐면 Primary Memory 라고 해서 주 메모리 라고 뜻합니다. 주 저장장치라고 여러분이 책을 봤을 때 주 저장장치라고 하면 메인 메모리 다른 메모리 아닙니다. 메인 메모리만 주 저장장치라고 합니다. 이것이라는 것을 여러분이 알고 계시면 될 것이고 이 녀석은 희발성입니다. 희발성이라는 뜻은 뭐냐면 전기 파워를 끄는 순간 데이터가 반환하거든요. 즉 저장능력이 없습니다. 연구저장하는 능력이 없고 전원이 들어와 있을 때만 임시적으로 데이터를 저장할 수 있는 겁니다. 그래서 메인 메모리에 데이터를 저장하고 프로그램을 저장하는 임시적으로 할 수 있다는 것을 말씀드립니다. 그리고 IO 모듈입니다. IO 모듈은 여러분이 기출력을 담당하는 녀석입니다. 이 녀석이 누구나 통신할 수 있게 해주는 것이죠. 여러분이 지금 많이 펜을 쓰고 있는데 여기에 펜 펜이 메모리 입력 단체가 되겠죠. 그래서 펜패드 이런 것 그리고 뭐 키보드 이런 것들이 다 여러분의 IO 모듈 쪽이 되겠습니다. 그리고 IO 모듈은 CPU가 싸구름입니다. IO 모듈이 돌아간다고 CPU 안 돌아가면 안되겠죠. 그러면 정윤석은 아무도 안하고 있겠죠. 동시에 쓰고 있고요. 시스템 버스는 뭐냐면 이 녀석들을 연결해 주는 저석입니다. 다음 페이지에서 우리가 그 구조를 보도록 하겠습니다. 이번 페이지에서 보게 되면 CPU가 있고 메인 메모리가 있고 다 IO 모듈이 있습니다. CPU가 그것을 연결하는 것이 바로 시스템 버스입니다. 시스템 버스 시스템 버스는 동시간대에 딱 한 녀석만 쓸 수 있습니다. 서로 정석에서 거기에 길을 같이 갈 수 있는게 아니고 한 녀석만 딱 가서 레어에서 씁니다. CPU가 잡았다. CPU가 씁니다. 메인 메모리에서 메인 메모리에서 한 녀석만 동시간대에 쓸 수 있다는 것을 기억해 주시길 바랍니다. 여기 CPU를 보게 되면 여러가지 레지스터가 존재합니다. 여기에서 보면 메모리와 연관이 있는 레지스터 메모리 어드레스 레지스터랑 메모리 버퍼 레지스터가 있고요. IO 모듈과 연관이 있는 우리가 IO 어드레스 레지스터랑 IO 버퍼 레지스터가 존재합니다. 그리고 이쪽에 3개는 뭐냐면 CPU 보유에 실행하기 위해서 있는 프로그램 카운터 라는 곳이 있고요. IR이 있고 실행하는 유닛이 있습니다. 프로그램 카운터는 다음에 실행할 영역을 주소로 가지고 있고 IR은 지금 영역을 실행시키는 기능이 되어있습니다. 이것을 우리가 알고 들어가야 합니다. 그러면 인스트럭션 실행에 대해서 어떤 구조로 진행되는지 우리가 알아보도록 하겠습니다. 일단 프로그램이 시작이 되면 프로세스는 메모리로부터 인스트럭션을 찍어옵니다. 명령어 들을 찍어오는데 그걸 우리가 뭐한다고 하죠? 캐치한다고 합니다. 캐치 단계가 있고요. 그 다음에 프로세스는 그걸 실행시킵니다. 그걸 실행 단계라고 해서 두 단계 캐치하고 실행. 항상 CPU는 캐치하고 실행입니다. 아시겠죠? 읽어야지 뭘 실행할 수 있겠죠? 아무것도 안읽어왔는데 어떻게 실행해? 알겠죠? 그래서 스타트를 하면 다음 인스트럭션을 캐치하고 그 다음에 실행을 합니다. 그리고 IR은 끝날 때까지 다음 인스트럭션이 끝나 이러면서 계속 돌립니다. 계속 돌아서 끝났다 이러면 우리가 된 것 같아요. 이 구조로 우리가 캐치하고 실행하고 캐치하고 실행하고 반복해서 한다는 것을 기억하시면 되겠습니다. 그러면 이 캐치된 것은 어디에 캐치 되는거야? 라고 했을 때 아까 제가 힌트를 드렸는데 프로세스는 인스트럭션을 메모리로부터 가져오게 되는데 이 녀석은 PC에 다음 실행될 명령어죠. 그분은 그 분의 카운트에 들어가게 됩니다. 그래서 우리가 여기에 못해서 숙여야 된다는 것을 여러분이 알고 있다가 그 다음에 실행될 때 이게 돌아가서 실행돼요. 아시겠죠? 자! 오늘의 제일 중요한 인터럭트에 대해서 이제 합니다. 인터럭트에 대해서 여러분들이 잘 아세요. OS는 인터럭트 기관으로 동작을 합니다. 인터럭트도 없으면 우리가 늦은 엄청나게 늦은 컨솔을 쓰면 됩니다. 다음으로 설명을 부탁드릴게요. 인터럭트는 CQ가 발생합니다. 인터럭트는 CQ가 발생합니다. 인터럭트는 CQ가 발생합니다. 인터럭트는 CQ가 발생합니다. 인터럭트는\n\n프로세스가 발생시키는게 아니라 외부장치로부터 멈춤이 연산을 시퓨를 멈추게 하는건데 어? 멈추게 하는데? 왜? 왜? 구조체제를 이걸 왜 이용하지? 이렇게 해야됩니다. 이 멈추는걸 했는데 성능이 올라갑니다. 어? 실행되려면 멈췄는데 성능이 올라갑니다. 이게 뭔데? 이렇게 해야됩니다. 이거는 우리가 장치마다 속도차가 있기 때문에 우리가 지금 이 속도에 따른 또다른 제어 방법을 넣어서 성능을 높이게 아이언 디바이스가 아무리 빠르다고 해도 CPU보다는 느립니다. 아무리 빠르다고 해도 CPU보다는 느려요. 연산속도보다는 느려요. 그래서 이 프로세스가 디바이스가 작업이 끝날때까지 멈추게 되는데 그 멈췄을 때 CPU가 처리할 수 있는 양은 어마무시합니다. 수천에서 수백만의 인스트럭션 사이클을 소비하게 됩니다. 이게 인스트럭션 한 번을 수행시키는 방법이 있는데 그것을 수천에서 수백만을 소비하게 되는데요. 그런 프로세스에 소비를 하게 됩니다. 그러면 우리가 이런 것들을 줄여야 되지 않을까 생각합니다. 그럼 어떻게 줄이면 될까를 알아보도록 하겠습니다. 알아보기 전에 인터넷 종류부터 알아보도록 하겠습니다. 인터넷 종류에는 프로그램, 타이어, 아이오, 바드웨어, 밸러가 있습니다. 첫번째 프로그램 인터럭트란 여러분이 만든 인터럭트입니다. 여러분이 프로그램을 짤 때 변수를 만들었는데 이 변수가 오버플로우나게 그 연산을 시킵니다. 안그러면 이 녀석을 0으로 나눕니다. 안그러면 이 녀석이 접근해야 되지 않은 영역을 메모리를 창조하게 만듭니다. 여러분이 메모리를 10만원을 창조했는데 갑자기 20에 접근해라 이러면 바로 인터럭트가 걸리죠. 그렇게 잘못된 수행을 했을 때 프로그램 인터럭트가 발생해서 그 프로그램을 종료시키는 작업을 하죠. 타이오라는게 운영체에 대해서는 중요한데요. 프로세서를 통해서 타이오를 운영하고 있고요. 그 다음에 이것은 일정 분기에 따라 타이오가 탁탁탁 들어옵니다. 그러면 1ms마다 이 타이오를 발생시켜라 하면 1ms마다 타이오를 탁탁탁하면서 멈추게 합니다. 그래서 이 멈춤을 통해서 장치로부터 신호가 와 있는지 발생했는지 안 발생했는지를 확인을 통해서 여러분들이 장치를 계속 쓸 수 있게 만듭니다. 여러분들이 이제 입력을 막 하고 있는데 컴퓨터가 반응을 안 해. 왜? 10초 있다가 반응을 하잖아. 그러면 이 입력을 10초 동안 입력한게 아직까지 반응이 안되고 있으면 여러분이 탁탁탁 들어오게 됩니다. 그래서 운영체제마다 타이오가 발생을 하면서 여러분이 신호가 몇개 들어왔는지 이런것들을 다 확인하고 이런식으로 강제적으로 확인을 하게 해서 여러분들이 수행을 하게 됩니다. I.O.U는 뭐냐면 입력장치 이런것들이 있죠. 입력이 들어왔을 때 입력이 들어온 인터넷을 알아보게 됩니다. 내가 프린터를 보냈는데 프린터가 끝났다 이런것들 그리고 프린터가 오르났다 이런것들을 알려주는 I.O.U 인터넷이 발생하고 그 인터넷이 발생한것을 퀴즈해서 확인을 하게 됩니다. 하드웨어 페일러가 있는데 하드웨어 페일러는 여러분 장치가 부장한거에요. 이걸 얻을 수 없어서 이벤트를 고쳐야 합니다. 그러면 큰일나죠. 이거는 우리가 다 보지 말자.\n"
}
